{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Mongo-Thingy is the most idiomatic and friendly-yet-powerful way to use MongoDB with Python.</p> <p>It is an \"Object-Document Mapper\" that gives you full advantage of MongoDB schema-less design by not asking you to define schemas in your code.</p> <p>What you'll get:</p> <ul> <li>a simple and robust pure-Python code base, with 100% coverage and few   dependencies;</li> <li>PyMongo query language - no need to learn yet another one;</li> <li>both sync and async support! choose what suits you best;</li> <li>Thingy views - control what to show, and create fields based on   other fields;</li> <li>swappable backend - wanna use SQLite behind the scenes? well, you can;</li> <li>versioning (optional) - rollback to any point in any thingy history;</li> <li>and more!</li> </ul>"},{"location":"Testing/","title":"Tests","text":"<p>To run the tests suite:</p> <ul> <li>make sure you have a MongoDB database running on <code>localhost:27017</code> (you can     spawn one with <code>docker-compose up -d</code>);</li> <li>install developers requirements with <code>pip install -r requirements.txt</code>;</li> <li>run <code>pytest</code>.</li> </ul>"},{"location":"compatibility/","title":"Compatibility","text":"<p>We support all Python and MongoDB versions supported by [PyMongo][pymongo], namely:</p> <ul> <li>CPython 3.7+ and PyPy3.7+</li> <li>MongoDB 3.6, 4.0, 4.2, 4.4, and 5.0.</li> </ul> <p>As a backend, Mongo-Thingy supports the following libraries:</p> <ul> <li> <p>Synchronous:</p> </li> <li> <p>[PyMongo][pymongo] (default)</p> </li> <li>[Mongomock][mongomock]</li> <li> <p>[MontyDB][montydb]</p> </li> <li> <p>Asynchronous:</p> </li> <li> <p>[Motor][motor] (default when Motor is installed)</p> </li> <li>[Motor][motor] with Tornado (default when Motor and Tornado are installed)</li> <li>[Mongomock-Motor][mongomock-motor]</li> </ul>"},{"location":"compatibility/#install","title":"Install","text":"<pre><code>pip install mongo-thingy\n</code></pre>"},{"location":"discovery/","title":"Discovery","text":""},{"location":"discovery/#databasecollection-discovery","title":"Database/collection \"discovery\"","text":""},{"location":"discovery/#default-behaviour","title":"Default behaviour","text":"<pre><code>&gt;&gt;&gt; class AuthenticationGroup(Thingy):\n...     pass\n\n&gt;&gt;&gt; connect(\"mongodb://localhost/\")\n&gt;&gt;&gt; AuthenticationGroup.collection\nCollection(Database(MongoClient(host=['localhost:27017'], ...), 'authentication'), 'group')\n</code></pre>"},{"location":"discovery/#use-mismatching-names-for-thingy-class-and-database-collection","title":"Use mismatching names for Thingy class and database collection","text":"<p>You can either specify the collection name:</p> <pre><code>&gt;&gt;&gt; class Foo(Thingy):\n...   collection_name = \"bar\"\n</code></pre> <p>or the collection directly:</p> <pre><code>&gt;&gt;&gt; class Foo(Thingy):\n...   collection = db.bar\n</code></pre> <p>You can then check what collection is being used with:</p> <pre><code>&gt;&gt;&gt; Foo.collection\nCollection(Database(MongoClient('localhost', 27017), 'database'), 'bar')\n</code></pre>"},{"location":"example/","title":"Examples","text":""},{"location":"example/#first-steps","title":"First steps","text":""},{"location":"example/#connect-insert-and-find-thingies","title":"Connect, insert and find thingies","text":"<pre><code>&gt;&gt;&gt; from mongo_thingy import connect, Thingy\n&gt;&gt;&gt; connect(\"mongodb://localhost/test\")\n\n&gt;&gt;&gt; class User(Thingy):\n...     pass\n\n&gt;&gt;&gt; user = User({\"name\": \"Mr. Foo\", \"age\": 42}).save()\n&gt;&gt;&gt; User.count_documents()\n1\n&gt;&gt;&gt; User.find_one({\"age\": 42})\nUser({'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 42})\n</code></pre> <p>In an AsyncIO (or Tornado) environment, use the asynchronous class instead:</p> <pre><code>&gt;&gt;&gt; from mongo_thingy import connect, AsyncThingy\n&gt;&gt;&gt; connect(\"mongodb://localhost/test\")\n\n&gt;&gt;&gt; class User(AsyncThingy):\n...     pass\n\n&gt;&gt;&gt; user = await User({\"name\": \"Mr. Foo\", \"age\": 42}).save()\n&gt;&gt;&gt; await User.count_documents()\n1\n&gt;&gt;&gt; await User.find_one({\"age\": 42})\nUser({'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 42})\n</code></pre> <p>To use another backend than the default ones, just pass its client class with <code>client_cls</code>:</p> <pre><code>&gt;&gt;&gt; import mongomock\n&gt;&gt;&gt; connect(client_cls=mongomock.MongoClient)\n</code></pre>"},{"location":"example/#update-a-thingy","title":"Update a thingy","text":"<pre><code>&gt;&gt;&gt; user.age\n42\n&gt;&gt;&gt; user.age = 1337\n&gt;&gt;&gt; user.save()\nUser({'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 1337})\n</code></pre>"},{"location":"indexing/","title":"Indexing","text":""},{"location":"indexing/#indexes","title":"Indexes","text":""},{"location":"indexing/#create-an-index","title":"Create an index","text":"<pre><code>&gt;&gt;&gt; User.create_index(\"email\", sparse=True, unique=True)\n</code></pre>"},{"location":"indexing/#add-one-or-more-indexes-create-later","title":"Add one or more indexes, create later","text":"<pre><code>&gt;&gt;&gt; User.add_index(\"email\", sparse=True, unique=True)\n&gt;&gt;&gt; User.add_index(\"username\")\n\n&gt;&gt;&gt; User.create_indexes()\n</code></pre>"},{"location":"indexing/#create-all-indexes-of-all-thingies-at-once","title":"Create all indexes of all thingies at once","text":"<pre><code>&gt;&gt;&gt; from mongo_thingy import create_indexes\n&gt;&gt;&gt; create_indexes()\n</code></pre>"},{"location":"indexing/#dealing-with-camelcase-data","title":"Dealing with camelCase data","text":"<pre><code>&gt;&gt;&gt; from mongo_thingy.camelcase import CamelCase\n\n&gt;&gt;&gt; class SystemUser(CamelCase, Thingy):\n...     collection_name = \"systemUsers\"\n\n&gt;&gt;&gt; user = SystemUser.find_one()\n&gt;&gt;&gt; user.view()\n{'_id': ObjectId(...), 'firstName': 'John', 'lastName': 'Doe'}\n\n&gt;&gt;&gt; user.first_name\n'John'\n&gt;&gt;&gt; user.first_name = \"Jonny\"\n&gt;&gt;&gt; user.save()\nSystemUser({'_id': ObjectId(...), firstName: 'Jonny', lastName: 'Doe'})\n</code></pre>"},{"location":"sponsors/","title":"Sponsors","text":""},{"location":"versioning/","title":"Versioning","text":""},{"location":"versioning/#versioning","title":"Versioning","text":"<pre><code>&gt;&gt;&gt; from mongo_thingy.versioned import Versioned\n\n&gt;&gt;&gt; class Article(Versioned, Thingy):\n...     pass\n\n&gt;&gt;&gt; article = Article(content=\"Cogito ergo sum\")\n&gt;&gt;&gt; article.version\n0\n\n&gt;&gt;&gt; article.save()\nArticle({'_id': ObjectId('...'), 'content': 'Cogito ergo sum'})\n&gt;&gt;&gt; article.version\n1\n\n&gt;&gt;&gt; article.content = \"Sum ergo cogito\"\n&gt;&gt;&gt; article.save()\nArticle({'_id': ObjectId('...'), 'content': 'Sum ergo cogito'})\n&gt;&gt;&gt; article.version\n2\n\n&gt;&gt;&gt; article.revert()\nArticle({'_id': ObjectId('...'), 'content': 'Cogito ergo sum'})\n&gt;&gt;&gt; article.version\n3\n</code></pre>"},{"location":"views/","title":"Views","text":""},{"location":"views/#thingy-views-power","title":"Thingy views power","text":""},{"location":"views/#complete-information-with-properties","title":"Complete information with properties","text":"<pre><code>&gt;&gt;&gt; class User(Thingy):\n...     @property\n...     def username(self):\n...         return \"\".join(char for char in self.name if char.isalpha())\n\n&gt;&gt;&gt; User.add_view(name=\"everything\", defaults=True, include=\"username\")\n&gt;&gt;&gt; user = User.find_one()\n&gt;&gt;&gt; user.view(\"everything\")\n{'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 1337, 'username': 'MrFoo'}\n</code></pre>"},{"location":"views/#hide-sensitive-stuff","title":"Hide sensitive stuff","text":"<pre><code>&gt;&gt;&gt; User.add_view(name=\"public\", defaults=True, exclude=\"password\")\n&gt;&gt;&gt; user.password = \"t0ps3cr3t\"\n&gt;&gt;&gt; user.view()\n{'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 1337, 'password': 't0ps3cr3t'}\n&gt;&gt;&gt; user.view(\"public\")\n{'_id': ObjectId(...), 'name': 'Mr. Foo', 'age': 1337}\n</code></pre>"},{"location":"views/#only-use-certain-fieldsproperties","title":"Only use certain fields/properties","text":"<pre><code>&gt;&gt;&gt; User.add_view(name=\"credentials\", include=[\"username\", \"password\"])\n&gt;&gt;&gt; user.view(\"credentials\")\n{'username': 'MrFoo', 'password': 't0ps3cr3t'}\n</code></pre>"},{"location":"views/#apply-views-on-cursors","title":"Apply views on cursors","text":"<pre><code>&gt;&gt;&gt; cursor = User.find()\n&gt;&gt;&gt; for credentials in cursor.view(\"credentials\"):\n...     print(credentials)\n{'username': 'MrFoo', 'password': 't0ps3cr3t'}\n{'username': 'MrsBar', 'password': '123456789'}\n...\n</code></pre> <p>And if your cursor is already exhausted, you can still apply a view!</p> <pre><code>&gt;&gt;&gt; users = User.find().to_list(None)\n&gt;&gt;&gt; for credentials in users.view(\"credentials\"):\n...     print(credentials)\n{'username': 'MrFoo', 'password': 't0ps3cr3t'}\n{'username': 'MrsBar', 'password': '123456789'}\n...\n</code></pre>"}]}